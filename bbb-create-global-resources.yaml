---
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Custom VPC parameters'
      Parameters:
      - VPCNameTag
    - Label:
        default: 'Alerting endpoints parameters'
      Parameters:
      - AlertsSMSEndpointPhoneNumber
      - AlertsEmailEndpointRecipientAddress
    - Label:
        default: 'RDS Postgres database parameters'
      Parameters:
      - RdsPostgresDatabaseName
      - RdsPostgresEngineVersion
      - RdsPostgresMasterUsername
      - RdsPostgresMasterUserPassword
      - RdsPostgresPort
      - RdsPostgresPreferredMaintenanceWindow

Parameters:
  VPCNameTag:
    Description: Name tag that will be assigned to the VPC
    Type: String
    Default: stack-created-vpc
    AllowedValues:
    - stack-created-vpc
    - my-vpc
    - custom-vpc
    - toothbrush

  AlertsSMSEndpointPhoneNumber:
    Description: Phone number that will receive SMS text message alerts
    Type: String
    Default: "+19995550000"

  AlertsEmailEndpointRecipientAddress:
    Description: Email address that will receive email alerts
    Type: String
    Default: "recipient@example.com"

  RdsPostgresDatabaseName:
    Description: Postgres database name used when creating RDS PostgreSQL instance
    Type: String
    Default: "postgres"

  RdsPostgresEngineVersion:
    Description: PostgreSQL version
    Type: String
    Default: '10.6'
    AllowedValues: ['10.9', '10.7', '10.6', '10.5', '10.4', '10.3', '10.1'] # aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion"

  RdsPostgresMasterUsername:
    Description: 'The master username for the database instance (will be ignored if DBSnapshotIdentifier is set - value used from snapshot)'
    Type: String

  RdsPostgresMasterUserPassword:
    Description: 'The master user password for the database instance (will be ignored if DBSnapshotIdentifier is set - value used from snapshot)'
    Type: String
    NoEcho: true

  RdsPostgresPort:
    Description: PostgreSQL version
    Type: String
    Default: '5432'

  RdsPostgresPreferredMaintenanceWindow:
    Description: The weekly time range (in UTC) during which system maintenance can occur.
    Type: String
    Default: 'wed:14:00-wed:17:30'


Resources:
  #----------------------------------------------------------------------------
  # This block is all related to creation of a custom VPC.
  # NOTE: I've found that using a non-default VPC can cause several problems
  #       later on that are difficult to diagnose. For now, I will probably
  #       not use this VPC. It was still fun to build it out. :)
  #----------------------------------------------------------------------------
  myStackCreatedVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref VPCNameTag
      - Key: creator-stack-name
        Value: !Ref AWS::StackName
      - Key: creator-stack-id
        Value: !Ref AWS::StackId
  myStackCreatedSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: 192.168.1.0/24
      Tags:
      - Key: Name
        Value: !Sub ${VPCNameTag}-subnet-a
      VpcId: !Ref myStackCreatedVPC
  myStackCreatedSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: 192.168.2.0/24
      Tags:
       - Key: Name
         Value: !Sub ${VPCNameTag}-subnet-a
      VpcId: !Ref myStackCreatedVPC
  myStackCreatedInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${VPCNameTag}-igw
  myStackCreatedRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myStackCreatedVPC
      Tags:
      - Key: Name
        Value: !Sub ${VPCNameTag}-rtb
  myStackCreatedRouteA:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId:
         Ref: myStackCreatedRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: myStackCreatedInternetGateway
  myStackCreatedInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myStackCreatedVPC
      InternetGatewayId: !Ref myStackCreatedInternetGateway
  myStackCreatedSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myStackCreatedRouteTable
      SubnetId:
        Ref: myStackCreatedSubnetA
  myStackCreatedSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myStackCreatedRouteTable
      SubnetId:
        Ref: myStackCreatedSubnetB
  #----------------------------------------------------------------------------
  # This block is all related to creation of a reusable EC2 instance profile.
  #----------------------------------------------------------------------------
  myIAMRootRoleForEc2InstanceProfiles:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      RoleName: !Join ['', [!Ref 'AWS::Region', -, 'RootRoleForEc2InstanceProfiles']]
  myIAMRootRoleForEc2InstanceProfilesPolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles:
        -
          Ref: "myIAMRootRoleForEc2InstanceProfiles"
  myIAMRootRoleInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "myIAMRootRoleForEc2InstanceProfiles"
  #----------------------------------------------------------------------------
  # This block is all related to creation of an SNS topic for alerts
  #----------------------------------------------------------------------------
  mySNSTopicForAlerts:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "My AWS alerts"
      TopicName: "my-alerts-topic"
  mySMSSubscriptionToSNSTopicForAlerts:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref mySNSTopicForAlerts
      Endpoint: !Ref AlertsSMSEndpointPhoneNumber
      Protocol: sms
  myEmailSubscriptionToSNSTopicForAlerts:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref mySNSTopicForAlerts
      Endpoint: !Ref AlertsEmailEndpointRecipientAddress
      Protocol: email
  #----------------------------------------------------------------------------
  # This block is all related to creation of a Postgres database in RDS
  #----------------------------------------------------------------------------
  mySecurityGroupForRDSPostgres:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections to Postgres database port and pings
      GroupName: sec-grp-for-rds-postgres-db
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref RdsPostgresPort
        ToPort: !Ref RdsPostgresPort
        CidrIp: 76.11.72.0/24
      - IpProtocol: tcp
        FromPort: !Ref RdsPostgresPort
        ToPort: !Ref RdsPostgresPort
        CidrIp: 172.98.67.0/24
  mySecurityGroupForRDSPostgresIngressSelfRef:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: mySecurityGroupForRDSPostgres
    Properties:
      GroupId: !GetAtt mySecurityGroupForRDSPostgres.GroupId
      # -1 means ALL
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt mySecurityGroupForRDSPostgres.GroupId
  myRDSPostgresDatabaseInstance:
      DeletionPolicy: Delete # Prevent a final snapshot from being created before database is deleted. Beware: YOU LOSE ALL DATA IN THE DATABASE!
      UpdateReplacePolicy: Delete # Prevent a final snapshot from being created before database is replaced. Beware: YOU LOSE ALL DATA IN THE DATABASE!
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: 20 # 20 is the minimum that is currently allowed when creating manually in the AWS Management Console
        DBInstanceClass: db.t2.micro
        DBInstanceIdentifier: stack-created-rds-postgres
        DBName: !Ref RdsPostgresDatabaseName
        DeleteAutomatedBackups: true
        Engine: postgres
        EngineVersion: !Ref RdsPostgresEngineVersion
        MasterUsername: !Ref RdsPostgresMasterUsername
        MasterUserPassword: !Ref RdsPostgresMasterUserPassword
        Port: !Ref RdsPostgresPort
        PreferredMaintenanceWindow: !Ref RdsPostgresPreferredMaintenanceWindow
        StorageType: gp2
        VPCSecurityGroups:
        - !GetAtt mySecurityGroupForRDSPostgres.GroupId
  myRDSPostgresRoute53CNAME:
    Type: 'AWS::Route53::RecordSet'
    DependsOn: myRDSPostgresDatabaseInstance
    Properties:
      HostedZoneName: 'adultmalehuman.org.'
      Comment: DNS name for my Postgres database instance
      Name: 'postgres.adultmalehuman.org'
      TTL: '180'
      Type: CNAME
      ResourceRecords:
      - !GetAtt 'myRDSPostgresDatabaseInstance.Endpoint.Address'
  #----------------------------------------------------------------------------


Outputs:
  MyStackCreatedVPCOutput:
    Value: !Ref myStackCreatedVPC
    Description: VPC id of my stack-created VPC
    Export:
      Name: StackCreatedVPC
  MyStackCreatedSubnetAOutput:
    Value: !Ref myStackCreatedSubnetA
    Description: Subnet id of my stack-created Subnet A
    Export:
      Name: StackCreatedSubnetA
  MyStackCreatedSubnetBOutput:
    Value: !Ref myStackCreatedSubnetB
    Description: Subnet id of my stack-created Subnet B
    Export:
      Name: StackCreatedSubnetB
  myIAMRootRoleInstanceProfileNameOutput:
    Value: !Ref myIAMRootRoleInstanceProfile
    Description: Id of my stack-created EC2 instance profile that grants full access rights
    Export:
      Name: IAMRootRoleInstanceProfileName
  myIAMRootRoleInstanceProfileArnOutput:
    Value: !GetAtt myIAMRootRoleInstanceProfile.Arn
    Description: ARN of my stack-created EC2 instance profile that grants full access rights
    Export:
      Name: IAMRootRoleInstanceProfileArn
  mySNSTopicForAlertsArnOutput:
    Value: !Ref mySNSTopicForAlerts
    Description: ARN of my stack-created SNS topic that is used for publishing alerts
    Export:
      Name: SNSTopicForAlertsARN
  mySNSTopicForAlertsTopicNameOutput:
    Value: !GetAtt mySNSTopicForAlerts.TopicName
    Description: Topic Name of my stack-created SNS topic that is used for publishing alerts
    Export:
      Name: SNSTopicForAlertsTopicName
