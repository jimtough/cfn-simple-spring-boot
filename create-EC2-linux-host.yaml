---
Mappings:
  AmazonLinuxDeveloperAMI:
    us-east-1:
      amiId: ami-035b3c7efe6d061d5
    ca-central-1:
      amiId: ami-0a67d15f2858e33cb


Parameters:
  KeyPairName:
    # On CloudFormation console, will display dropdown list of keypairs for account
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair


Resources:
  myEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          # packages:
          #   :
          # groups:
          #   :
          # users:
          #   :
          sources:
            "/home/ec2-user/aws-cli": "https://github.com/aws/aws-cli/tarball/master"
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.myEC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource myEC2Instance --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
          commands:
            testCommandA:
              command: "echo \"$MAGIC2\" > test2.txt"
              env:
                MAGIC2: "I come from the environment!"
              cwd: "~"
              test: "test ! -e ~/test2.txt"
              ignoreErrors: "false"
            testCommandB:
              command: "echo \"This is some bullcrap here!\" > bullcrap.txt"
              cwd: "/root"
              ignoreErrors: "false"
          # services:
          #   :
    CreationPolicy:
      ResourceSignal:
        Timeout: PT3M
    Properties:
      # Stop using my custom VPC - it created too many access issues
      #AvailabilityZone: us-east-1a
      ImageId: !FindInMap [AmazonLinuxDeveloperAMI, !Ref 'AWS::Region', amiId]
      InstanceType: t2.micro
      KeyName:
        Ref: KeyPairName
      SecurityGroupIds:
        - !Ref mySecurityGroupForSshAndHttp
      # Stop using my custom VPC - it created too many access issues
      #SubnetId: !ImportValue StackCreatedSubnetA
      Tags:
      - Key: Name
        Value: stack-created-ec2-instance
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe

            #------------------------------------------------------------------
            # This block is all about executing the CloudFormation metadata
            # updates via the cfn-init script call below. The cfn-hup script
            # call is then supposed to block until all the metadata updates
            # are completed. Finally, the cfn-signal script call will signal
            # CloudFormation that this resource (the EC2 server) has finished
            # being created.
            #------------------------------------------------------------------
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap

            # Cloud init logs on the created EC2 can be found here:
            #    /var/log/cloud-init-output.log

            # Start cfn-init
            #/opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r myEC2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            /opt/aws/bin/cfn-init -v -s ${AWS::StackName} -r myEC2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            /opt/aws/bin/cfn-hup -v || error_exit 'Failed to start cfn-hup'
            # All done so signal success
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource myEC2Instance --region ${AWS::Region}
            #------------------------------------------------------------------

            # Post-cfn work
            # Update to Java 8
            sudo yum install -y java-1.8.0-openjdk.x86_64 || true
            sudo /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java || true
            sudo /usr/sbin/alternatives --set javac /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/javac || true
            sudo yum remove -y java-1.7.0-openjdk.x86_64 || true

            # NOT WORKING YET... need to figure out authentication stuff...
            # Copy test app from S3 bucket to server
            aws s3 cp s3://kitchen-sink/simple-spring-boot-app.jar .

  mySecurityGroupForSshAndHttp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP connections from anywhere
      GroupName: sec-grp-for-ssh-and-http-to-my-ec2
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      # Stop using my custom VPC - it created too many access issues
      #VpcId: !ImportValue StackCreatedVPC

  mySecurityGroupIngressSelfReference:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: mySecurityGroupForSshAndHttp
    Properties:
      GroupId: !GetAtt mySecurityGroupForSshAndHttp.GroupId
      # -1 means ALL
      IpProtocol: -1
      #FromPort: '5000'
      #ToPort: '5000'
      SourceSecurityGroupId: !GetAtt mySecurityGroupForSshAndHttp.GroupId

  myElasticIpForEC2Instance:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref myEC2Instance

  myRoute53DNSRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: myElasticIpForEC2Instance
    Properties:
      HostedZoneName: 'adultmalehuman.org.'
      Comment: DNS name for my instance.
      #Name: !Join ['', [!Ref 'myEC2Instance', ., !Ref 'AWS::Region', ., 'adultmalehuman.org']]
      Name: 'ec2.adultmalehuman.org'
      Type: A
      #TTL: '900'
      TTL: '300'
      ResourceRecords:
      - !GetAtt myEC2Instance.PublicIp
