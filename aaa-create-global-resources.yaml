---
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:

    - Label:
        default: 'S3 bucket parameters'
      Parameters:
      - MyGeneralPurposeS3BucketFileExpirationInDays
      - MyCodePipelineS3BucketFileExpirationInDays

    - Label:
        default: 'Alerting endpoints parameters'
      Parameters:
      - AlertsSMSEndpointPhoneNumber
      - AlertsEmailEndpointRecipientAddress

    # - Label:
    #     default: 'RDS Postgres database parameters'
    #   Parameters:
    #   - RdsPostgresDatabaseName
    #   - RdsPostgresEngineVersion
    #   - RdsPostgresMasterUsername
    #   - RdsPostgresMasterUserPassword
    #   - RdsPostgresPort
    #   - RdsPostgresPreferredMaintenanceWindow


Parameters:
  MyGeneralPurposeS3BucketFileExpirationInDays:
    Description: How many days until a file in the general purpose S3 bucket is deleted?
    Type: Number
    MinValue: 1
    # 5 x 365
    MaxValue: 1825
    Default: 730

  MyCodePipelineS3BucketFileExpirationInDays:
    Description: How many days until a file in the CodePipeline S3 bucket is deleted?
    Type: Number
    MinValue: 1
    MaxValue: 29
    Default: 29

  AlertsSMSEndpointPhoneNumber:
    Description: Phone number that will receive SMS text message alerts
    Type: String
    Default: "+19995550000"

  AlertsEmailEndpointRecipientAddress:
    Description: Email address that will receive email alerts
    Type: String
    Default: "recipient@example.com"

  # RdsPostgresDatabaseName:
  #   Description: Postgres database name used when creating RDS PostgreSQL instance
  #   Type: String
  #   Default: "postgres"
  #
  # RdsPostgresEngineVersion:
  #   Description: PostgreSQL version
  #   Type: String
  #   Default: '9.6.14'
  #   AllowedValues: ['10.9', '10.7', '10.6', '10.5', '10.4', '10.3', '10.1', '9.6.14'] # aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion"
  #
  # RdsPostgresMasterUsername:
  #   Description: 'The master username for the database instance (will be ignored if DBSnapshotIdentifier is set - value used from snapshot)'
  #   Type: String
  #
  # RdsPostgresMasterUserPassword:
  #   Description: 'The master user password for the database instance (will be ignored if DBSnapshotIdentifier is set - value used from snapshot)'
  #   Type: String
  #   NoEcho: true
  #
  # RdsPostgresPort:
  #   Description: PostgreSQL version
  #   Type: String
  #   Default: '5432'
  #
  # RdsPostgresPreferredMaintenanceWindow:
  #   Description: The weekly time range (in UTC) during which system maintenance can occur.
  #   Type: String
  #   Default: 'wed:14:00-wed:17:30'


Resources:
  #----------------------------------------------------------------------------
  # This block is related to creation of S3 buckets that will potentially be
  # used for multiple purposes. I prefer to group these will my 'global'
  # resources, rather than include them in individual stacks.
  #----------------------------------------------------------------------------
  MyGeneralPurposeS3Bucket:
    Type: AWS::S3::Bucket
    # Protect from accidental stack deletion
    DeletionPolicy: Retain
    Properties:
      BucketName: general-purpose-s3-bucket
      LifecycleConfiguration:
        Rules:
        - Id: general-purpose-bucket-lifecycle-rules
          Status: Enabled
          ExpirationInDays: !Ref MyGeneralPurposeS3BucketFileExpirationInDays
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: "foo"
          Value: "bar"
  MyCodePipelineS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: code-pipeline-s3-bucket
      LifecycleConfiguration:
        Rules:
        - Id: code-pipeline-bucket-lifecycle-rules
          Status: Enabled
          ExpirationInDays: !Ref MyCodePipelineS3BucketFileExpirationInDays
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: "foo"
          Value: "bar"

  #----------------------------------------------------------------------------
  # This block is all related to creation of a reusable EC2 instance profile.
  #----------------------------------------------------------------------------
  myIAMRootRoleForEc2InstanceProfiles:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      RoleName: !Join ['', [!Ref 'AWS::Region', -, 'RootRoleForEc2InstanceProfiles']]
  myIAMRootRoleForEc2InstanceProfilesPolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles:
        -
          Ref: "myIAMRootRoleForEc2InstanceProfiles"
  myIAMRootRoleInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "myIAMRootRoleForEc2InstanceProfiles"
  #----------------------------------------------------------------------------
  # This block is all related to creation of an EC2 instance profile for an
  # EC2 instance that executes CodeDeploy and needs S3 bucket read/list rights.
  #----------------------------------------------------------------------------
  # TODO Remove this when convenient...
  myIAMRoleForEC2InstancesThatRunCodeDeploy:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      RoleName: !Join ['', [!Ref 'AWS::Region', -, 'RoleForEc2InstancesThatRunCodeDeploy']]
  # TODO Remove this when convenient...
  myIAMPolicyForEC2InstancesThatRunCodeDeploy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CodeDeploy-EC2-permissions-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:Get*"
              - "s3:List*"
            Resource: "*"
      Roles:
        -
          Ref: "myIAMRoleForEC2InstancesThatRunCodeDeploy"
  # TODO Remove this when convenient...
  myIAMRoleForCodeDeployTutorial:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      RoleName: !Join ['', [!Ref 'AWS::Region', -, 'RoleForCodeDeployTutorial']]
  # myIAMRootRoleInstanceProfile:
  #   Type: "AWS::IAM::InstanceProfile"
  #   Properties:
  #     Path: "/"
  #     Roles:
  #       -
  #         Ref: "myIAMRootRoleForEc2InstanceProfiles"
  #----------------------------------------------------------------------------
  # This block is all related to creation of an SNS topic for alerts
  #----------------------------------------------------------------------------
  mySNSTopicForAlerts:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "My AWS alerts"
      TopicName: "my-alerts-topic"
  mySMSSubscriptionToSNSTopicForAlerts:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref mySNSTopicForAlerts
      Endpoint: !Ref AlertsSMSEndpointPhoneNumber
      Protocol: sms
  myEmailSubscriptionToSNSTopicForAlerts:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref mySNSTopicForAlerts
      Endpoint: !Ref AlertsEmailEndpointRecipientAddress
      Protocol: email
  #----------------------------------------------------------------------------
  # This block is all related to creation of a Postgres database in RDS
  #----------------------------------------------------------------------------
  # mySecurityGroupForRDSPostgres:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Allow connections to Postgres database port and pings
  #     GroupName: sec-grp-for-rds-postgres-db
  #     SecurityGroupIngress:
  #     - IpProtocol: tcp
  #       FromPort: !Ref RdsPostgresPort
  #       ToPort: !Ref RdsPostgresPort
  #       CidrIp: 76.11.72.0/24
  #     - IpProtocol: tcp
  #       FromPort: !Ref RdsPostgresPort
  #       ToPort: !Ref RdsPostgresPort
  #       CidrIp: 172.98.67.0/24
  # mySecurityGroupForRDSPostgresIngressSelfRef:
  #   Type: 'AWS::EC2::SecurityGroupIngress'
  #   DependsOn: mySecurityGroupForRDSPostgres
  #   Properties:
  #     GroupId: !GetAtt mySecurityGroupForRDSPostgres.GroupId
  #     # -1 means ALL
  #     IpProtocol: -1
  #     SourceSecurityGroupId: !GetAtt mySecurityGroupForRDSPostgres.GroupId
  # myRDSPostgresDatabaseInstance:
  #     DeletionPolicy: Delete # Prevent a final snapshot from being created before database is deleted. Beware: YOU LOSE ALL DATA IN THE DATABASE!
  #     UpdateReplacePolicy: Delete # Prevent a final snapshot from being created before database is replaced. Beware: YOU LOSE ALL DATA IN THE DATABASE!
  #     Type: AWS::RDS::DBInstance
  #     Properties:
  #       AllocatedStorage: 20 # 20 is the minimum that is currently allowed when creating manually in the AWS Management Console
  #       DBInstanceClass: db.t2.micro
  #       DBInstanceIdentifier: stack-created-rds-postgres
  #       DBName: !Ref RdsPostgresDatabaseName
  #       DeleteAutomatedBackups: true
  #       Engine: postgres
  #       EngineVersion: !Ref RdsPostgresEngineVersion
  #       MasterUsername: !Ref RdsPostgresMasterUsername
  #       MasterUserPassword: !Ref RdsPostgresMasterUserPassword
  #       Port: !Ref RdsPostgresPort
  #       PreferredMaintenanceWindow: !Ref RdsPostgresPreferredMaintenanceWindow
  #       StorageType: gp2
  #       VPCSecurityGroups:
  #       - !GetAtt mySecurityGroupForRDSPostgres.GroupId
  # myRDSPostgresRoute53CNAME:
  #   Type: 'AWS::Route53::RecordSet'
  #   DependsOn: myRDSPostgresDatabaseInstance
  #   Properties:
  #     HostedZoneName: 'adultmalehuman.org.'
  #     Comment: DNS name for my Postgres database instance
  #     Name: 'postgres.adultmalehuman.org'
  #     TTL: '180'
  #     Type: CNAME
  #     ResourceRecords:
  #     - !GetAtt 'myRDSPostgresDatabaseInstance.Endpoint.Address'
  #----------------------------------------------------------------------------


Outputs:
  myCodePipelineS3BucketOutput:
    Description: My S3 bucket for CodeBuild, CodeDeploy and CodePipeline
    Value: !Ref MyCodePipelineS3Bucket
    Export:
      Name: CodePipelineS3Bucket
  myGeneralPurposeS3BucketOutput:
    Description: My general purpose S3 bucket for miscellaneous stuff
    Value: !Ref MyGeneralPurposeS3Bucket
    Export:
      Name: GeneralPurposeS3Bucket

  myIAMRootRoleInstanceProfileNameOutput:
    Value: !Ref myIAMRootRoleInstanceProfile
    Description: Id of my stack-created EC2 instance profile that grants full access rights
    Export:
      Name: IAMRootRoleInstanceProfileName
  myIAMRootRoleInstanceProfileArnOutput:
    Value: !GetAtt myIAMRootRoleInstanceProfile.Arn
    Description: ARN of my stack-created EC2 instance profile that grants full access rights
    Export:
      Name: IAMRootRoleInstanceProfileArn

  mySNSTopicForAlertsArnOutput:
    Value: !Ref mySNSTopicForAlerts
    Description: ARN of my stack-created SNS topic that is used for publishing alerts
    Export:
      Name: SNSTopicForAlertsARN
  mySNSTopicForAlertsTopicNameOutput:
    Value: !GetAtt mySNSTopicForAlerts.TopicName
    Description: Topic Name of my stack-created SNS topic that is used for publishing alerts
    Export:
      Name: SNSTopicForAlertsTopicName
