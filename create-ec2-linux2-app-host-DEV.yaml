---
Mappings:
  AmazonLinux2AMI:
    us-east-1:
      amiId: ami-0b898040803850657
    ca-central-1:
      amiId: ami-XXXXXXXXXXXXXXXXX


Parameters:
  KeyPairName:
    # On CloudFormation console, will display dropdown list of keypairs for account
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  AvailabilityZoneForEC2InstanceAndVolume:
    Description: Which AZ should be used for the EC2 instance and its volume?
    Type: String
    Default: us-east-1a
    AllowedValues:
    - us-east-1a
    - us-east-1b
    - us-east-1c
    - us-east-1d
    - us-east-1e
    - us-east-1f


Resources:

  myVolume:
    Type: AWS::EC2::Volume
    Properties:
      Size: 1
      AvailabilityZone:
        Ref: AvailabilityZoneForEC2InstanceAndVolume
      Tags:
        - Key: Name
          Value: volume-attached-to-my-EC-linux-instance
    #DeletionPolicy: Snapshot
    DeletionPolicy: Delete

  myEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: mySecurityGroupIngressSelfReference
    Metadata:
      AWS::CloudFormation::Init:
        config:
          # packages:
          #   :
          # FIXME The 'groups' and 'users' setup below breaks the stack every time... why?
          #groups:
          #  svcuser: {}
          #users:
          #  svcuser:
          #    groups:
          #      - "svcuser"
          #    homeDir: "/tmp"
          sources:
            "/home/ec2-user/aws-cli": "https://github.com/aws/aws-cli/tarball/master"
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.myEC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource myEC2Instance --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/systemd/system/simple-spring-boot.service":
              content: !Sub |
                [Unit]
                Description=Simple Spring Boot app
                After=syslog.target

                [Service]
                User=ec2-user
                ExecStart=/usr/bin/java -jar /var/app/simple-spring-boot-app.jar
                SuccessExitStatus=143

                [Install]
                WantedBy=multi-user.target
              mode: "000755"
              owner: "root"
              group: "root"
          commands:
            cmd01:
              command: "echo \"$MAGIC\" > test.txt"
              env:
                MAGIC: "I come from the environment!"
              cwd: "~"
              test: "test ! -e ~/test.txt"
              ignoreErrors: "false"
            cmd02:
              # Copy Simple Spring Boot app from S3 bucket into /root
              # temporarily, and then move it to its final destination
              # via UserData commands
              command: "aws s3 cp s3://kitchen-sink/simple-spring-boot-app.jar /root/simple-spring-boot-app.jar"
          # services:
          #   :
    CreationPolicy:
      ResourceSignal:
        Timeout: PT3M
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZoneForEC2InstanceAndVolume
      IamInstanceProfile: !ImportValue IAMRootRoleInstanceProfileName
      ImageId: !FindInMap [AmazonLinux2AMI, !Ref 'AWS::Region', amiId]
      InstanceType: t2.micro
      KeyName:
        Ref: KeyPairName
      SecurityGroupIds:
        - !Ref mySecurityGroupForSshAndHttp
      # Stop using my custom VPC - it created too many access issues
      #SubnetId: !ImportValue StackCreatedSubnetA
      Tags:
      - Key: Name
        Value: stack-created-ec2-instance
      - Key: AppName
        Value: simple-spring-boot
      - Key: Env
        Value: dev
      Volumes:
      - Device: /dev/sdf
        VolumeId: !Ref myVolume
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe

            #------------------------------------------------------------------
            # This block is all about executing the CloudFormation metadata
            # updates via the cfn-init script call below. The cfn-hup script
            # call is then supposed to block until all the metadata updates
            # are completed. Finally, the cfn-signal script call will signal
            # CloudFormation that this resource (the EC2 server) has finished
            # being created.
            #------------------------------------------------------------------
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap

            # Cloud init logs on the created EC2 can be found here:
            #    /var/log/cloud-init-output.log

            # Start cfn-init
            #/opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r myEC2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            /opt/aws/bin/cfn-init -v -s ${AWS::StackName} -r myEC2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'

            # TODO Should I move the following two calls further down, so the EC2 is only marked as initialized after EVERYTHING is set up?
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            /opt/aws/bin/cfn-hup -v || error_exit 'Failed to start cfn-hup'
            # All done so signal success
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource myEC2Instance --region ${AWS::Region}
            #------------------------------------------------------------------

            # Post-cfn work

            # create mount point directory
            mkdir /mnt/sdf
            # create ext4 filesystem on new volume
            mkfs -t ext4 /dev/sdf
            # add an entry to fstab to mount volume during boot
            echo "/dev/sdf        /mnt/sdf    ext4    defaults,nofail 0       2" >> /etc/fstab
            # mount the volume on current boot
            mount -a

            # Update to Java 8
            yum install -y java-1.8.0-openjdk.x86_64 || true
            /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java || true
            /usr/sbin/alternatives --set javac /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/javac || true

            # Create a symlink (/var/app) that points to /mnt/sdf
            ln -s /mnt/sdf /var/app

            #-------------------------------------------------------
            # This block installs things needed by CodeDeploy
            yum update -y
            yum install ruby -y
            yum install wget -y
            cd /root
            wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            # TODO delete the 'install' dir...
            #-------------------------------------------------------



            # More the Simple Spring Boot app into /var/app
            mv /root/simple-spring-boot-app.jar /var/app/simple-spring-boot-app.jar
            chmod 755 /var/app/simple-spring-boot-app.jar

            # Start my app as a systemd service (defined in metadata above).
            # NOTE: Use this command on the server to see service status:
            #         sudo systemctl status simple-spring-boot
            # NOTE: If service fails to start up, this command shows logs:
            #         sudo journalctl --unit=simple-spring-boot
            # reference: https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units
            systemctl enable simple-spring-boot.service
            systemctl start simple-spring-boot.service


  mySecurityGroupForSshAndHttp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP connections from anywhere
      GroupName: sec-grp-for-ssh-and-http-to-my-ec2
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      # enable ping (should probably remove later)
      - IpProtocol: icmp
        FromPort: 8
        ToPort: -1
        CidrIp: 0.0.0.0/0
      # Stop using my custom VPC - it created too many access issues
      #VpcId: !ImportValue StackCreatedVPC

  mySecurityGroupIngressSelfReference:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: mySecurityGroupForSshAndHttp
    Properties:
      GroupId: !GetAtt mySecurityGroupForSshAndHttp.GroupId
      # -1 means ALL
      IpProtocol: -1
      #FromPort: '5000'
      #ToPort: '5000'
      SourceSecurityGroupId: !GetAtt mySecurityGroupForSshAndHttp.GroupId

  myElasticIpForEC2Instance:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref myEC2Instance

  myRoute53DNSRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: myElasticIpForEC2Instance
    Properties:
      HostedZoneName: 'adultmalehuman.org.'
      Comment: DNS name for my instance.
      #Name: !Join ['', [!Ref 'myEC2Instance', ., !Ref 'AWS::Region', ., 'adultmalehuman.org']]
      Name: 'ec2.adultmalehuman.org'
      Type: A
      #TTL: '900'
      TTL: '300'
      ResourceRecords:
      - !GetAtt myEC2Instance.PublicIp

  myCloudwatchAlarmForCPUUtilization:
    Type: AWS::CloudWatch::Alarm
    # Do not generate alerts during EC2 initialization - wait until Route53 is set up and the instance can be reached from the internet
    Properties:
      AlarmDescription: CPU alarm for my EC2 instance
      #AlarmName: alarm-for-my-ec2-cpu-usage
      AlarmActions:
      - !ImportValue SNSTopicForAlertsARN
      #- Ref: "logical name of an AWS::SNS::Topic resource"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '25'
      ComparisonOperator: GreaterThanThreshold
      Unit: Percent
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: myEC2Instance
